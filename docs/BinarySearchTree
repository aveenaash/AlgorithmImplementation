Analysis of Performance of BSTs

1. The running time of insertion, deletion, and search are all proportional to the time it
takes to arrive at the node of interest. If d is the depth of this node, it therefore follows
that performance of these operations is always O(d).

2. The question remains: How big is d? In the worst case, d is Θ(n), where n is the
number of nodes in the tree. In good cases, when the tree is sufficiently balanced, d is
Θ(log n). In fact, average-case analysis shows that d is Θ(log n). On the next slide, we
discuss one of the ways this result is obtained

3. To improve the worst-case running time for BST operations, much research has been
done on how to ensure that a binary tree, while it is growing, remains balanced, so that
even in the worst case, the operations run in O(log n). We introduce several variations
at the end of this lesson. The next lesson focuses on the most widely used variant: red-
black trees.


Average Case Analysis of BSTs

The main result is:
The average depth of a node in a randomly built BST having n nodes is O(log n).

A BST with n nodes is said to be randomly built if n distinct integers are randomly
chosen and inserted successively into an initially empty BST. (An alternative analysis
uses the concept of a randomly chosen BST: What is meant in this case is that all
BSTs having n nodes and storing as data the distinct integers 0, 1,..., n - 1 are equally
likely to occur.)

Handling Duplicates in A BST

1. To handle duplicate values, store in each Node a List (instead of a value); then when a
value is added to a Node, it is instead added to the List.

2. Example: Suppose we are storing Employees in a BST, ordered by Name. Our BST
will be created so that the value in each node is a List<Employee> instance. Then,
after insertions, all Employees with the same name will be found in a single List
located in a single Node.

3. Example: Suppose we want to have a data structure that provides us with a count of
how many Employees have a particular salary. To begin, we could order Employees
by salary (using a SalaryComparator), insert into a BST using Lists as values in each
Node. After all Employees have been inserted, we could answer the query "How many
have salary 50000?" by searching for the 50,000 node and then returning the size of
the list stored at that node.
